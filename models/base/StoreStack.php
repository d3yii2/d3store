<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3store\models\base;

use d3yii2\d3store\models\StoreStackQuery;
use Yii;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "store_stack".
 *
 * @property integer $id
 * @property integer $store_id
 * @property string $name
 * @property string $type
 * @property string $product_name
 * @property integer $capacity
 * @property string $notes
 * @property integer $active
 * @property string $sys_name
 *
 * @property \d3yii2\d3store\models\StoreStore $store
 * @property \d3yii2\d3store\models\StoreTransactions[] $storeTransactions
 * @property \d3yii2\d3store\models\StoreTransactions[] $storeTransactions0
 * @property string $aliasModel
 */
abstract class StoreStack extends ActiveRecord
{



    /**
    * ENUM field values
    */
    public const TYPE_STANDARD = 'Standard';
    public const TYPE_TEHNICAL = 'Tehnical';
    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'store_stack';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['store_id'], 'required'],
            'enum-type' => ['type', 'in', 'range' => [
                    self::TYPE_STANDARD,
                    self::TYPE_TEHNICAL,
                ]
            ],
            'tinyint Unsigned' => [['active'],'integer' ,'min' => 0 ,'max' => 255],
            'smallint Unsigned' => [['id','store_id'],'integer' ,'min' => 0 ,'max' => 65535],
            'integer Signed' => [['capacity'],'integer' ,'min' => -2147483648 ,'max' => 2147483647],
            [['type', 'notes'], 'string'],
            [['name', 'product_name'], 'string', 'max' => 255],
            [['sys_name'], 'string', 'max' => 50],
            [['store_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3store\models\StoreStore::className(), 'targetAttribute' => ['store_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3store', 'ID'),
            'store_id' => Yii::t('d3store', 'Store'),
            'name' => Yii::t('d3store', 'Stack name'),
            'type' => Yii::t('d3store', 'Type'),
            'product_name' => Yii::t('d3store', 'Product'),
            'capacity' => Yii::t('d3store', 'Capacity'),
            'notes' => Yii::t('d3store', 'Notes'),
            'active' => Yii::t('d3store', 'Active'),
            'sys_name' => Yii::t('d3store', 'Sys Name'),
        ];
    }

    /**
     * @return ActiveQuery
     */
    public function getStore()
    {
        return $this->hasOne(\d3yii2\d3store\models\StoreStore::className(), ['id' => 'store_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreTransactions()
    {
        return $this->hasMany(\d3yii2\d3store\models\StoreTransactions::className(), ['stack_from' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreTransactions0()
    {
        return $this->hasMany(\d3yii2\d3store\models\StoreTransactions::className(), ['stack_to' => 'id']);
    }

    
    /**
     * @inheritdoc
     * @return StoreStackQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new StoreStackQuery(get_called_class());
    }


    /**
     * get column type enum value label
     * @param string $value
     * @return string
     */
    public static function getTypeValueLabel($value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsType();
        return $labels[$value] ?? $value;
    }

    /**
     * column type ENUM value labels
     * @return string[]
     */
    public static function optsType(): array
    {
        return [
            self::TYPE_STANDARD => Yii::t('d3store', 'Standard'),
            self::TYPE_TEHNICAL => Yii::t('d3store', 'Tehnical'),
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isTypeStandard(): bool
    {
        return $this->type === self::TYPE_STANDARD;
    }

     /**
     * @return void
     */
    public function setTypeStandard(): void
    {
        $this->type = self::TYPE_STANDARD;
    }
    /**
     * @return bool
     */
    public function isTypeTehnical(): bool
    {
        return $this->type === self::TYPE_TEHNICAL;
    }

     /**
     * @return void
     */
    public function setTypeTehnical(): void
    {
        $this->type = self::TYPE_TEHNICAL;
    }
}
