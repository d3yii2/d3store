<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3store\models\base;

use Yii;
use d3yii2\d3store\models\StoreTransactions;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "store_tran_add".
 *
 * @property integer $id
 * @property integer $transactions_id
 * @property integer $type_id
 * @property float $quantity
 * @property float $remain_quantity
 *
 * @property StoreTransactions $transactions
 * @property string $aliasModel
 */
abstract class StoreTranAdd extends ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'store_tran_add';
    }

    /**
     * @inheritdoc
     */
    public function rules(): array
    {
        return [
            'required' => [['transactions_id', 'type_id', 'quantity', 'remain_quantity'], 'required'],
            'decimal-signed-13-3' => [
                ['quantity', 'remain_quantity'],
                    'number',
                    'numberPattern' => '/^([\+-]?((\d{1,10})|(\d{0,10}\.\d{0,3})|(\.\d{1,3})))$/',
                    'message' =>  Yii::t('crud', 'Invalid number format')
                ],
            'tinyint Unsigned' => [['type_id'],'integer' ,'min' => 0 ,'max' => 255],
            'integer Unsigned' => [['id','transactions_id'],'integer' ,'min' => 0 ,'max' => 4294967295],
            [['quantity', 'remain_quantity'], 'number'],
            [['transactions_id'], 'exist', 'skipOnError' => true, 'targetClass' => StoreTransactions::className(), 'targetAttribute' => ['transactions_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels(): array
    {
        return [
            'id' => 'ID',
            'transactions_id' => 'Transactions ID',
            'type_id' => 'Type ID',
            'quantity' => 'Quantity',
            'remain_quantity' => 'Remain Quantity',
        ];
    }

    /**
     * @return ActiveQuery
     */
    public function getTransactions(): ActiveQuery
    {
        return $this
            ->hasOne(StoreTransactions::className(), ['id' => 'transactions_id']);
    }

}
