<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3store\models\base;

use Yii;

/**
 * This is the base-model class for table "store_transactions".
 *
 * @property string $id
 * @property string $action
 * @property string $tran_time
 * @property integer $stack_from
 * @property integer $stack_to
 * @property string $quantity
 * @property string $remain_quantity
 * @property integer $ref_id
 * @property string $ref_record_id
 *
 * @property \d3yii2\d3store\models\StoreStack $stackFrom
 * @property \d3yii2\d3store\models\StoreStack $stackTo
 * @property \d3yii2\d3store\models\StoreRef $ref
 * @property \d3yii2\d3store\models\StoreWoff[] $storeWoffs
 * @property \d3yii2\d3store\models\StoreWoff[] $storeWoffs0
 * @property string $aliasModel
 */
abstract class StoreTransactions extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const ACTION_LOAD = 'Load';
    const ACTION_UNLOAD = 'Unload';
    const ACTION_MOVE = 'Move';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'store_transactions';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['action', 'tran_time', 'quantity', 'remain_quantity'], 'required'],
            [['action'], 'string'],
            [['tran_time'], 'safe'],
            [['stack_from', 'stack_to', 'ref_id', 'ref_record_id'], 'integer'],
            [['quantity', 'remain_quantity'], 'number'],
            [['stack_from'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3store\models\StoreStack::className(), 'targetAttribute' => ['stack_from' => 'id']],
            [['stack_to'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3store\models\StoreStack::className(), 'targetAttribute' => ['stack_to' => 'id']],
            [['ref_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3store\models\StoreRef::className(), 'targetAttribute' => ['ref_id' => 'id']],
            ['action', 'in', 'range' => [
                    self::ACTION_LOAD,
                    self::ACTION_UNLOAD,
                    self::ACTION_MOVE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3store', 'ID'),
            'action' => Yii::t('d3store', 'Action'),
            'tran_time' => Yii::t('d3store', 'Time'),
            'stack_from' => Yii::t('d3store', 'From stack'),
            'stack_to' => Yii::t('d3store', 'To stack'),
            'quantity' => Yii::t('d3store', 'quantity'),
            'remain_quantity' => Yii::t('d3store', 'Remain quantity'),
            'ref_id' => Yii::t('d3store', 'Refernce model'),
            'ref_record_id' => Yii::t('d3store', 'Reference model record'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStackFrom()
    {
        return $this->hasOne(\d3yii2\d3store\models\StoreStack::className(), ['id' => 'stack_from']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStackTo()
    {
        return $this->hasOne(\d3yii2\d3store\models\StoreStack::className(), ['id' => 'stack_to']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRef()
    {
        return $this->hasOne(\d3yii2\d3store\models\StoreRef::className(), ['id' => 'ref_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStoreWoffs()
    {
        return $this->hasMany(\d3yii2\d3store\models\StoreWoff::className(), ['load_tran_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStoreWoffs0()
    {
        return $this->hasMany(\d3yii2\d3store\models\StoreWoff::className(), ['unload_tran_id' => 'id']);
    }


    
    /**
     * @inheritdoc
     * @return \d3yii2\d3store\models\StoreTransactionsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \d3yii2\d3store\models\StoreTransactionsQuery(get_called_class());
    }


    /**
     * get column action enum value label
     * @param string $value
     * @return string
     */
    public static function getActionValueLabel($value){
        $labels = self::optsAction();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column action ENUM value labels
     * @return array
     */
    public static function optsAction()
    {
        return [
            self::ACTION_LOAD => Yii::t('d3store', self::ACTION_LOAD),
            self::ACTION_UNLOAD => Yii::t('d3store', self::ACTION_UNLOAD),
            self::ACTION_MOVE => Yii::t('d3store', self::ACTION_MOVE),
        ];
    }

}
