<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3store\models\base;

use Yii;
use d3yii2\d3store\models\StoreFixes;
use d3yii2\d3store\models\StoreRef;
use d3yii2\d3store\models\StoreStack;
use d3yii2\d3store\models\StoreTranAdd;
use d3yii2\d3store\models\StoreTransactionFlow;
use d3yii2\d3store\models\StoreTransactionsQuery;
use d3yii2\d3store\models\StoreWoff;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "store_transactions".
 *
 * @property integer $id
 * @property string $action
 * @property string $tran_time
 * @property integer $stack_from
 * @property integer $stack_to
 * @property float $quantity
 * @property float $remain_quantity
 * @property integer $ref_id
 * @property integer $ref_record_id
 * @property integer $add_ref_id
 * @property integer $add_ref_record_id
 *
 * @property StoreRef $ref
 * @property StoreStack $stackFrom
 * @property StoreStack $stackTo
 * @property StoreFixes[] $storeFixes
 * @property StoreTranAdd[] $storeTranAdds
 * @property StoreTransactionFlow[] $storeTransactionFlows
 * @property StoreTransactionFlow[] $storeTransactionFlows0
 * @property StoreWoff[] $storeWoffs
 * @property StoreWoff[] $storeWoffs0
 * @property string $aliasModel
 */
abstract class StoreTransactions extends ActiveRecord
{

    /**
    * column action ENUM values
    */
    public const ACTION_LOAD = 'Load';
    public const ACTION_UNLOAD = 'Unload';
    public const ACTION_MOVE = 'Move';

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'store_transactions';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['action', 'tran_time', 'quantity', 'remain_quantity'], 'required'],
            'enum-action' => ['action', 'in', 'range' => [
                    self::ACTION_LOAD,
                    self::ACTION_UNLOAD,
                    self::ACTION_MOVE,
                ]
            ],
            'decimal-signed-13-3' => [
                ['quantity', 'remain_quantity'],
                    'number',
                    'numberPattern' => '/^([\+-]?((\d{1,10})|(\d{0,10}\.\d{0,3})|(\.\d{1,3})))$/',
                    'message' =>  Yii::t('crud', 'Invalid number format')
                ],
            'tinyint Unsigned' => [['ref_id','add_ref_id'],'integer' ,'min' => 0 ,'max' => 255],
            'smallint Unsigned' => [['stack_from','stack_to'],'integer' ,'min' => 0 ,'max' => 65535],
            'integer Unsigned' => [['id','ref_record_id','add_ref_record_id'],'integer' ,'min' => 0 ,'max' => 4294967295],
            [['action'], 'string'],
            [['tran_time'], 'safe'],
            [['quantity', 'remain_quantity'], 'number'],
            [['stack_from'], 'exist', 'skipOnError' => true, 'targetClass' => StoreStack::className(), 'targetAttribute' => ['stack_from' => 'id']],
            [['stack_to'], 'exist', 'skipOnError' => true, 'targetClass' => StoreStack::className(), 'targetAttribute' => ['stack_to' => 'id']],
            [['ref_id'], 'exist', 'skipOnError' => true, 'targetClass' => StoreRef::className(), 'targetAttribute' => ['ref_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3store', 'ID'),
            'action' => Yii::t('d3store', 'Action'),
            'tran_time' => Yii::t('d3store', 'Time'),
            'stack_from' => Yii::t('d3store', 'From stack'),
            'stack_to' => Yii::t('d3store', 'To stack'),
            'quantity' => Yii::t('d3store', 'quantity'),
            'remain_quantity' => Yii::t('d3store', 'Remain quantity'),
            'ref_id' => Yii::t('d3store', 'Refernce model'),
            'ref_record_id' => Yii::t('d3store', 'Reference model record'),
            'add_ref_id' => Yii::t('d3store', 'Add Ref ID'),
            'add_ref_record_id' => Yii::t('d3store', 'Add Ref Record ID'),
        ];
    }

    /**
     * @return ActiveQuery
     */
    public function getDmShiftings()
    {
        return $this
            ->hasMany(DmShifting::className(), ['store_transaction_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getRef()
    {
        return $this
            ->hasOne(StoreRef::className(), ['id' => 'ref_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStackFrom()
    {
        return $this
            ->hasOne(StoreStack::className(), ['id' => 'stack_from']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStackTo()
    {
        return $this
            ->hasOne(StoreStack::className(), ['id' => 'stack_to']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreFixes()
    {
        return $this
            ->hasMany(StoreFixes::className(), ['transaction_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreTranAdds()
    {
        return $this
            ->hasMany(StoreTranAdd::className(), ['transactions_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreTransactionFlows()
    {
        return $this
            ->hasMany(StoreTransactionFlow::className(), ['next_tran_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreTransactionFlows0()
    {
        return $this
            ->hasMany(StoreTransactionFlow::className(), ['prev_tran_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreWoffs()
    {
        return $this
            ->hasMany(StoreWoff::className(), ['load_tran_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getStoreWoffs0()
    {
        return $this
            ->hasMany(StoreWoff::className(), ['unload_tran_id' => 'id']);
    }

    /**
     * @inheritdoc
     * @return StoreTransactionsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new StoreTransactionsQuery(get_called_class());
    }

    /**
     * get column action enum value label
     * @param string $value
     * @return string
     */
    public static function getActionValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsAction();
        return $labels[$value] ?? $value;
    }

    /**
     * column action ENUM value labels
     * @return string[]
     */
    public static function optsAction(): array
    {
        return [
            self::ACTION_LOAD => Yii::t('d3store', 'Load'),
            self::ACTION_UNLOAD => Yii::t('d3store', 'Unload'),
            self::ACTION_MOVE => Yii::t('d3store', 'Move'),
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isActionLoad(): bool
    {
        return $this->action === self::ACTION_LOAD;
    }

     /**
     * @return void
     */
    public function setActionLoad(): void
    {
        $this->action = self::ACTION_LOAD;
    }
    /**
     * @return bool
     */
    public function isActionUnload(): bool
    {
        return $this->action === self::ACTION_UNLOAD;
    }

     /**
     * @return void
     */
    public function setActionUnload(): void
    {
        $this->action = self::ACTION_UNLOAD;
    }
    /**
     * @return bool
     */
    public function isActionMove(): bool
    {
        return $this->action === self::ACTION_MOVE;
    }

     /**
     * @return void
     */
    public function setActionMove(): void
    {
        $this->action = self::ACTION_MOVE;
    }
}
